#include <iostream>
#include <fstream>
#include <string>
#include <limits>
#include <sstream>

using namespace std;

// -------------------------- TP7 --------------------------
// Fait par Albano Coline et Andreu Sarah avec l'aide de Curt Elien et Valente Hugo

// ------------- Exercice 1 -------------
void flux_cin(){
    string ligne;

    while (true){
        cout << "Entrez une ligne (ou 'fin de fichier' pour sortir du programme) : ";
        getline(cin,ligne);
        if (ligne == "fin de fichier"){
            return;
        }
        else if (cin.eof()){
            return;
        }
        cout << ligne << endl;
    }
}



// ------------- Exercice 2 -------------
void afichFich() {
    ifstream fichier("LaFontaine.txt");
    if (!fichier.is_open()) {
        cerr << "Erreur d'ouverture du fichier." << endl;
        return;
    }

    string ligne;
    while (getline(fichier, ligne)) {
        if (ligne == "fin-de-fichier") {
            break;
        }
        cout << ligne << endl;
    }
}



// ------------- Exercice 3 -------------
void nomFichAuClavier(){
    string source;
    string destinataire;
    string ligne;
    unsigned cpt = 0;
    cout << "Entrez le chemin du fichier source : ";
    cin >> source;
    cout << "Entrez le chemin du fichier destinataire : ";
    cin >> destinataire;

    ifstream ifs(source);
    ofstream ofs(destinataire);

    while(ifs.is_open()){
        getline(ifs, ligne);
        if(ligne == ""){
            ifs.close();
            ofs.close();
            break;
        }
        ligne = ligne + "    " + to_string(cpt);
        ofs << ligne << endl;
        cpt = cpt + 1;
    }

    cout << "Nombre de ligne : " << cpt << endl;
}


// ------------- Exercice 4 -------------
void validFichier(){
    string source;
    string Destination;
    int tentativesL(0);
    int tentativesE(0);

    cout << "Entrez le nom du fichier source : ";
    cin >> source;
    while (tentativesL < 3) {
        ifstream fichierSource(source);
        if (fichierSource.is_open()) {
            fichierSource.close();
            break;
        } else {
            cout << "Erreur d'ouverture en lecture. Tentative " << tentativesL + 1 << "/3" << endl;
            tentativesL++;
        }
    }
    if (tentativesL == 3) {
        cout << "3 echecs d'ouverture de fichier en lecture." << endl;
        return;
    }


    while (tentativesE < 3) {
        cout << "Entrez le nom du fichier destination : ";
        cin >> Destination;

        ofstream fichierDestination(Destination);
        if (fichierDestination.is_open()) {
            fichierDestination.close();
            break;
        } else {
            cout << "Erreur d'ouverture en ecriture. Tentative " << tentativesE + 1 << "/3" << endl;
            tentativesE++;
        }
    }
    if (tentativesE == 3) {
        cout << "3 echecs d'ouverture de fichier en ecriture." << endl;
        return;
    }

    ifstream fichierS(source);
    ofstream fichierD(Destination);
    string ligne;
    while (getline(fichierS, ligne)) {
        fichierD << ligne << endl;
    }
    fichierS.close();
    fichierD.close();
    cout << "Copie du fichier terminee avec succès." << endl;
}


// ------------- Exercice 5 -------------
void fonctionGet(){
    string Source;
    string tmps;
    cout << "saisir le nom du fichier source : ";
    getline(cin, Source);
    ifstream ifs (Source);
    char caractere;
    while (ifs.get(caractere)){
        if(tmps.size() == 14){
            for(size_t i = 0; i < size(tmps); ++i){
                tmps[i] = tmps[i+1];
            }
            tmps.pop_back();
            tmps += caractere;
        }else{
            tmps += caractere;
        }
        if(tmps == "fin du fichier") {
            cout << endl;
            break;
        }
        cout << caractere;
    }
    ifs.close();
}

// ------------- Exercice 6 -------------
void ExtractionsMots(){
    string mot;
    cout << "Entrez une ligne (ou 'fin de fichier' pour sortir du programme) : ";
    while (cin >> mot){
        if (mot == "fin-de-fichier"){
            return;
        }
        cout << mot << endl;
    }
}



// ------------- Exercice 7 -------------
void extractionsCars(){
    char carac;
    cout << "Entrez une ligne (ou 'fin de fichier' pour sortir du programme) : ";
    while (cin >> carac){
        cout << carac << endl;
    }
}



// ------------- Exercice 8 -------------
void extractionsEntiers(){
    int reel;
    cout << "Entrez une ligne (ou 'fin de fichier' pour sortir du programme) : ";
    while (cin >> reel){
        cout << reel << endl;
    }
}


// ------------- Exercice 9 -------------
void extractionsReels() {
    std::string input;

    while (std::cin >> input) {
        std::istringstream iss(input);
        double realNumber;

        if (iss >> realNumber >> std::ws && iss.eof()) {
            // Extraction réussie, affiche le réel
            std::cout << realNumber << std::endl;
        } else {
            // Extraction échouée, réel invalide
            std::cerr << "Réel invalide: " << input << std::endl;
            break;
        }
    }

    if (std::cin.fail() && !std::cin.eof()) {
        // Fin de fichier ou erreur d'entrée
        std::cerr << "Erreur d'entrée ou fin de fichier atteinte." << std::endl;
    }
}


/*
void extractionsReels() {
    if (EstEntier()){

    }
    else if (EcritureScientifique()){

    }
    else if (Virgule()){

    }
}

bool estEntier(const string& str) {
    istringstream iss(str);
    int entier;

    if (iss >> entier >> ws && iss.eof()) {
        return true;
    } else {
        return false;
    }
}

bool EcritureScientifique(){

}

bool Virgule(){

}*/



int main()
{
    //flux_cin();
    //afichFich();
    //nomFichAuClavier();
    //validFichier();
    //fonctionGet();
    //ExtractionsMots();
    //extractionsCars();
    extractionsEntiers();
    //extractionsReels();
    return 0;
}
